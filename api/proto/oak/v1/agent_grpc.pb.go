// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/oak/v1/agent.proto

package oakv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OakService_AgentStream_FullMethodName    = "/oak.v1.OakService/AgentStream"
	OakService_HealthCheck_FullMethodName    = "/oak.v1.OakService/HealthCheck"
	OakService_GetAgentStatus_FullMethodName = "/oak.v1.OakService/GetAgentStatus"
)

// OakServiceClient is the client API for OakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OakService handles bidirectional communication between agents and server
type OakServiceClient interface {
	// AgentStream establishes a bidirectional stream for agent communication
	// The agent initiates the connection and both sides can send messages
	AgentStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, ServerMessage], error)
	// Health check for Kubernetes liveness probes
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// GetAgentStatus returns the connection status of an agent
	GetAgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error)
}

type oakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOakServiceClient(cc grpc.ClientConnInterface) OakServiceClient {
	return &oakServiceClient{cc}
}

func (c *oakServiceClient) AgentStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OakService_ServiceDesc.Streams[0], OakService_AgentStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OakService_AgentStreamClient = grpc.BidiStreamingClient[AgentMessage, ServerMessage]

func (c *oakServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, OakService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oakServiceClient) GetAgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentStatusResponse)
	err := c.cc.Invoke(ctx, OakService_GetAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OakServiceServer is the server API for OakService service.
// All implementations must embed UnimplementedOakServiceServer
// for forward compatibility.
//
// OakService handles bidirectional communication between agents and server
type OakServiceServer interface {
	// AgentStream establishes a bidirectional stream for agent communication
	// The agent initiates the connection and both sides can send messages
	AgentStream(grpc.BidiStreamingServer[AgentMessage, ServerMessage]) error
	// Health check for Kubernetes liveness probes
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// GetAgentStatus returns the connection status of an agent
	GetAgentStatus(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error)
	mustEmbedUnimplementedOakServiceServer()
}

// UnimplementedOakServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOakServiceServer struct{}

func (UnimplementedOakServiceServer) AgentStream(grpc.BidiStreamingServer[AgentMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method AgentStream not implemented")
}
func (UnimplementedOakServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOakServiceServer) GetAgentStatus(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedOakServiceServer) mustEmbedUnimplementedOakServiceServer() {}
func (UnimplementedOakServiceServer) testEmbeddedByValue()                    {}

// UnsafeOakServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OakServiceServer will
// result in compilation errors.
type UnsafeOakServiceServer interface {
	mustEmbedUnimplementedOakServiceServer()
}

func RegisterOakServiceServer(s grpc.ServiceRegistrar, srv OakServiceServer) {
	// If the following call pancis, it indicates UnimplementedOakServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OakService_ServiceDesc, srv)
}

func _OakService_AgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OakServiceServer).AgentStream(&grpc.GenericServerStream[AgentMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OakService_AgentStreamServer = grpc.BidiStreamingServer[AgentMessage, ServerMessage]

func _OakService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OakServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OakService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OakServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OakService_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OakServiceServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OakService_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OakServiceServer).GetAgentStatus(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OakService_ServiceDesc is the grpc.ServiceDesc for OakService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OakService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oak.v1.OakService",
	HandlerType: (*OakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OakService_HealthCheck_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _OakService_GetAgentStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStream",
			Handler:       _OakService_AgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/oak/v1/agent.proto",
}

const (
	AgentManagement_RequestCredentials_FullMethodName = "/oak.v1.AgentManagement/RequestCredentials"
	AgentManagement_CheckStatus_FullMethodName        = "/oak.v1.AgentManagement/CheckStatus"
)

// AgentManagementClient is the client API for AgentManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentManagement handles agent registration and credential management
// This service allows agents to request credentials without mTLS (first-time)
type AgentManagementClient interface {
	// RequestCredentials is called by agents to get credentials
	// - First-time: Agent provides api_token (optional) or requests manual approval
	// - Returns: credentials if approved, or pending status
	RequestCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
	// CheckStatus allows agents to poll for approval status
	// Used when agent is in PENDING state waiting for admin approval
	CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type agentManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagementClient(cc grpc.ClientConnInterface) AgentManagementClient {
	return &agentManagementClient{cc}
}

func (c *agentManagementClient) RequestCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, AgentManagement_RequestCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementClient) CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentManagement_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentManagementServer is the server API for AgentManagement service.
// All implementations must embed UnimplementedAgentManagementServer
// for forward compatibility.
//
// AgentManagement handles agent registration and credential management
// This service allows agents to request credentials without mTLS (first-time)
type AgentManagementServer interface {
	// RequestCredentials is called by agents to get credentials
	// - First-time: Agent provides api_token (optional) or requests manual approval
	// - Returns: credentials if approved, or pending status
	RequestCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
	// CheckStatus allows agents to poll for approval status
	// Used when agent is in PENDING state waiting for admin approval
	CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedAgentManagementServer()
}

// UnimplementedAgentManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentManagementServer struct{}

func (UnimplementedAgentManagementServer) RequestCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCredentials not implemented")
}
func (UnimplementedAgentManagementServer) CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedAgentManagementServer) mustEmbedUnimplementedAgentManagementServer() {}
func (UnimplementedAgentManagementServer) testEmbeddedByValue()                         {}

// UnsafeAgentManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagementServer will
// result in compilation errors.
type UnsafeAgentManagementServer interface {
	mustEmbedUnimplementedAgentManagementServer()
}

func RegisterAgentManagementServer(s grpc.ServiceRegistrar, srv AgentManagementServer) {
	// If the following call pancis, it indicates UnimplementedAgentManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentManagement_ServiceDesc, srv)
}

func _AgentManagement_RequestCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServer).RequestCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagement_RequestCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServer).RequestCredentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagement_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagement_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServer).CheckStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentManagement_ServiceDesc is the grpc.ServiceDesc for AgentManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oak.v1.AgentManagement",
	HandlerType: (*AgentManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCredentials",
			Handler:    _AgentManagement_RequestCredentials_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _AgentManagement_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oak/v1/agent.proto",
}
