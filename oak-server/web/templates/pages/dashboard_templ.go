// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/oakproject-flink/oak-flink/oak-server/web/templates/layouts"
import "github.com/oakproject-flink/oak-flink/oak-server/web/templates/components"

func Dashboard(stats map[string]interface{}) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-6\"><!-- Page Header --><div class=\"flex items-center justify-between\"><div><h1 class=\"text-3xl font-bold\">Dashboard</h1><p class=\"text-base-content/60\">Monitor your Flink clusters and jobs</p></div><div class=\"flex gap-2\"><button class=\"btn btn-primary btn-sm\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\"></path></svg> Deploy Job</button> <button class=\"btn btn-ghost btn-sm\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path></svg> Refresh</button></div></div><!-- Stats Cards -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.StatsCards(stats).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Charts Row --><div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"><!-- Throughput Chart --><div class=\"chart-container\"><h3 class=\"text-lg font-semibold mb-4\">Records Throughput</h3><div id=\"throughput-chart\"></div></div><!-- CPU Usage Chart --><div class=\"chart-container\"><h3 class=\"text-lg font-semibold mb-4\">CPU Usage</h3><div id=\"cpu-chart\"></div></div></div><!-- Jobs Table --><div class=\"glass-card p-6\"><div class=\"flex items-center justify-between mb-4\"><h3 class=\"text-lg font-semibold\">Recent Jobs</h3><a href=\"/jobs\" class=\"link link-primary text-sm\">View all</a></div><div hx-get=\"/api/jobs\" hx-trigger=\"load, every 10s\" hx-swap=\"innerHTML\"><div class=\"loading loading-spinner loading-lg mx-auto\"></div></div></div><!-- Initialize Charts --><script>\n\t\t\t\t// Throughput Chart\n\t\t\t\tconst throughputChart = new ApexCharts(document.querySelector(\"#throughput-chart\"), {\n\t\t\t\t\tseries: [{\n\t\t\t\t\t\tname: 'Records/sec',\n\t\t\t\t\t\tdata: [6000, 7200, 6800, 7500, 8100, 7800, 8500, 8200, 7900, 8400]\n\t\t\t\t\t}],\n\t\t\t\t\tchart: {\n\t\t\t\t\t\ttype: 'area',\n\t\t\t\t\t\theight: 250,\n\t\t\t\t\t\tbackground: 'transparent',\n\t\t\t\t\t\ttoolbar: { show: false },\n\t\t\t\t\t\tanimations: { enabled: true }\n\t\t\t\t\t},\n\t\t\t\t\ttheme: { mode: 'dark' },\n\t\t\t\t\tstroke: { curve: 'smooth', width: 3 },\n\t\t\t\t\tfill: {\n\t\t\t\t\t\ttype: 'gradient',\n\t\t\t\t\t\tgradient: {\n\t\t\t\t\t\t\tshadeIntensity: 1,\n\t\t\t\t\t\t\topacityFrom: 0.7,\n\t\t\t\t\t\t\topacityTo: 0.2,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcolors: ['#10b981'],\n\t\t\t\t\txaxis: {\n\t\t\t\t\t\tcategories: ['10:00', '10:10', '10:20', '10:30', '10:40', '10:50', '11:00', '11:10', '11:20', '11:30'],\n\t\t\t\t\t\tlabels: { style: { colors: '#94a3b8' } }\n\t\t\t\t\t},\n\t\t\t\t\tyaxis: {\n\t\t\t\t\t\tlabels: { style: { colors: '#94a3b8' } }\n\t\t\t\t\t},\n\t\t\t\t\tgrid: { borderColor: '#334155' },\n\t\t\t\t\ttooltip: {\n\t\t\t\t\t\ttheme: 'dark',\n\t\t\t\t\t\tx: { show: true }\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthroughputChart.render();\n\n\t\t\t\t// CPU Usage Chart\n\t\t\t\tconst cpuChart = new ApexCharts(document.querySelector(\"#cpu-chart\"), {\n\t\t\t\t\tseries: [{\n\t\t\t\t\t\tname: 'CPU %',\n\t\t\t\t\t\tdata: [45, 52, 48, 55, 61, 58, 65, 62, 59, 64]\n\t\t\t\t\t}],\n\t\t\t\t\tchart: {\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\theight: 250,\n\t\t\t\t\t\tbackground: 'transparent',\n\t\t\t\t\t\ttoolbar: { show: false }\n\t\t\t\t\t},\n\t\t\t\t\ttheme: { mode: 'dark' },\n\t\t\t\t\tstroke: { curve: 'smooth', width: 3 },\n\t\t\t\t\tcolors: ['#6366f1'],\n\t\t\t\t\txaxis: {\n\t\t\t\t\t\tcategories: ['10:00', '10:10', '10:20', '10:30', '10:40', '10:50', '11:00', '11:10', '11:20', '11:30'],\n\t\t\t\t\t\tlabels: { style: { colors: '#94a3b8' } }\n\t\t\t\t\t},\n\t\t\t\t\tyaxis: {\n\t\t\t\t\t\tmax: 100,\n\t\t\t\t\t\tlabels: { style: { colors: '#94a3b8' } }\n\t\t\t\t\t},\n\t\t\t\t\tgrid: { borderColor: '#334155' },\n\t\t\t\t\ttooltip: {\n\t\t\t\t\t\ttheme: 'dark',\n\t\t\t\t\t\tx: { show: true }\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: { size: 4 }\n\t\t\t\t});\n\t\t\t\tcpuChart.render();\n\n\t\t\t\t// Real-time updates via SSE\n\t\t\t\tconst eventSource = new EventSource('/api/metrics/stream');\n\t\t\t\teventSource.onmessage = function(event) {\n\t\t\t\t\tconst metrics = JSON.parse(event.data);\n\t\t\t\t\tconsole.log('Metrics update:', metrics);\n\t\t\t\t\t// TODO: Update charts with new data\n\t\t\t\t};\n\t\t\t</script></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Base("Dashboard").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
